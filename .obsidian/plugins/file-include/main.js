/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => IncludeFilePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// util.ts
function resolvePath(targetPath, sourcePath) {
  targetPath = targetPath.replace("\\", "/");
  if (targetPath.startsWith("/")) {
    throw Error(`"${targetPath}" should not start with "/". Use "@/" to reference a file relative to the vault root.`);
  }
  if (targetPath.startsWith("@/")) {
    return targetPath.substring(2);
  }
  if (!sourcePath) {
    throw Error(`Cannot resolve relative path "${targetPath}" because the source path is missing.`);
  }
  const parts = sourcePath.split("/");
  parts.pop();
  for (const part of targetPath.split("/")) {
    if (part == "..") {
      if (parts.pop() == void 0) {
        throw Error(`"${targetPath}" could not be resolved. Did you use too many ".."?`);
      }
    } else if (part == "." || !part) {
    } else {
      parts.push(part);
    }
  }
  return parts.join("/");
}

// main.ts
var IncludeFilePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor("include", async (source, el, ctx) => {
      var _a, _b;
      let markdown;
      let include_path;
      try {
        const sectionInfo = ctx.getSectionInfo(el);
        if (sectionInfo == null) {
          throw Error("Could not retrieve section information.");
        }
        include_path = (0, import_obsidian.normalizePath)(resolvePath((0, import_obsidian.normalizePath)(source.trim()), ctx.sourcePath));
        const include_file = this.app.vault.getAbstractFileByPath(include_path);
        if (include_file == null) {
          throw Error(`"${source}" could not be found.`);
        } else if (include_file instanceof import_obsidian.TFolder) {
          throw Error(`"${source}" is a folder.`);
        } else if (!(include_file instanceof import_obsidian.TFile)) {
          throw Error(`"${source}" is not a file.`);
        }
        const content = await this.app.vault.read(include_file);
        const startLine = sectionInfo.text.split(/\n/)[sectionInfo.lineStart];
        const lang = (_b = (_a = startLine.match(/include(?:[:\s]+(?<lang>\w+))?/)) == null ? void 0 : _a.groups) == null ? void 0 : _b.lang;
        markdown = ["```", lang, "\n", content.trim(), "\n```"].join("");
      } catch (error) {
        let message;
        if (error instanceof Error) {
          message = error.message;
        } else {
          message = String(error);
        }
        markdown = `> [!error] ${message}`;
        include_path = "unresolved";
      }
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.View);
      if (view == null) {
        el.createSpan({ text: "There is no active view for rendering markdown." });
      } else {
        await import_obsidian.MarkdownRenderer.renderMarkdown(markdown, el, include_path, view);
      }
    });
  }
  onunload() {
  }
};


/* nosourcemap */